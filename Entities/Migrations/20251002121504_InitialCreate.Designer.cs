// <auto-generated />
using System;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(PharmacistRecommendationDbContext))]
    [Migration("20251002121504_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AdministrationMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AdministrationMode", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Assistant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorPharmacistId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Assistant__3214EC07");

                    b.HasIndex(new[] { "SupervisorPharmacistId" }, "IX_Assistant_SupervisorPharmacistId");

                    b.ToTable("Assistant", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Document__3214EC07A42E023C");

                    b.HasIndex(new[] { "DocumentTypeId" }, "IX_Document_DocumentTypeId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Document_PatientId");

                    b.HasIndex(new[] { "UserId" }, "IX_Document_UserId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Entities.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Document__3214EC0739146449");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("Entities.Models.EmailConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("SmtpPort")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SmtpServer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__EmailCon__3214EC078A630780");

                    b.HasIndex(new[] { "PharmacyId" }, "IX_EmailConfiguration_PharmacyId");

                    b.ToTable("EmailConfiguration", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ImportConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__ImportCo__3214EC0767366104");

                    b.HasIndex(new[] { "PharmacyId" }, "IX_ImportConfiguration_PharmacyId");

                    b.ToTable("ImportConfiguration", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiuneTerapeutica")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ambalaj")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Bulina")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodATC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CodATC");

                    b.Property<string>("CodCIM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CodCIM");

                    b.Property<string>("Concentratia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CustomNomenclatorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("CustomNomenclatorName");

                    b.Property<string>("DCI")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DCI");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Manual");

                    b.Property<string>("Denumire")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Diez")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dreptunghi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirmaDetinatoare")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirmaProducatoare")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FormaFarmaceutica")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("LinkedOfficialMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("LinkedOfficialMedicationId");

                    b.Property<string>("NrData")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prescriptie")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PreviousCodCIM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PreviousCodCIM");

                    b.Property<string>("Stea")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Triunghi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Valabilitate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VolumAmbalaj")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Medicati__3214EC07AAA77029");

                    b.HasIndex("LinkedOfficialMedicationId");

                    b.HasIndex(new[] { "CodCIM" }, "IX_Medication_CodCIM");

                    b.ToTable("Medication", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MedicationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Medicati__3214EC077DB018F6");

                    b.HasIndex(new[] { "DocumentId" }, "IX_MedicationDocument_DocumentId");

                    b.HasIndex(new[] { "MedicationId" }, "IX_MedicationDocument_MedicationId");

                    b.ToTable("MedicationDocument", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Monitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("MonitoringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Monitori__3214EC07DFBF32F4");

                    b.HasIndex(new[] { "CardId" }, "IX_Monitoring_CardId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Monitoring_PatientId");

                    b.ToTable("Monitoring", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cid")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CID");

                    b.Property<string>("Cnp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CNP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Patient__3214EC079F46E542");

                    b.HasIndex(new[] { "Cnp" }, "IX_Patient_PersonalId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Pharmacist", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("ActivationCheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ncm")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Pharmacist__3214EC07");

                    b.ToTable("Pharmacist", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CUI")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CUI");

                    b.Property<string>("ConsentTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Pharmacy__3214EC075262534F");

                    b.ToTable("Pharmacy", (string)null);
                });

            modelBuilder.Entity("Entities.Models.PharmacyCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Pharmacy__3214EC078F3535BC");

                    b.HasIndex(new[] { "PatientId" }, "IX_PharmacyCard_PatientId");

                    b.HasIndex(new[] { "PharmacyId" }, "IX_PharmacyCard_PharmacyId");

                    b.ToTable("PharmacyCard", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaregiverCnp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CaregiverName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiagnosisMentionedByPatient")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DoctorStamp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FillDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MedicamentsMentionedByPacient")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotesToDoctor")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientCnp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmaceuticalService")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacistObservations")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PharmacistRecommendation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Series")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Suspicion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__Prescrip__3214EC07FC595671");

                    b.HasIndex(new[] { "DocumentId" }, "IX_Prescription_DocumentId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Prescription_PatientId");

                    b.HasIndex(new[] { "Series", "Number" }, "IX_Prescription_SeriesNumber");

                    b.ToTable("Prescription", (string)null);
                });

            modelBuilder.Entity("Entities.Models.PrescriptionMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministrationModeId")
                        .HasColumnType("int");

                    b.Property<string>("Evening")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsWithPrescription")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Morning")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Night")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Noon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Prescrip__3214EC07825DDC1B");

                    b.HasIndex(new[] { "AdministrationModeId" }, "IX_PrescriptionMedication_AdministrationModeId");

                    b.HasIndex(new[] { "MedicationId" }, "IX_PrescriptionMedication_MedicationId");

                    b.HasIndex(new[] { "PrescriptionId" }, "IX_PrescriptionMedication_PrescriptionId");

                    b.ToTable("PrescriptionMedication", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ncm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCM");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonalId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC0734FF2881");

                    b.HasIndex(new[] { "PharmacyId" }, "IX_User_PharmacyId");

                    b.HasIndex(new[] { "Username" }, "IX_User_Username")
                        .IsUnique()
                        .HasFilter("([Username] IS NOT NULL)");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Assistant", b =>
                {
                    b.HasOne("Entities.Models.User", "IdNavigation")
                        .WithOne("Assistant")
                        .HasForeignKey("Entities.Models.Assistant", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Assistant_User");

                    b.HasOne("Entities.Models.Pharmacist", "SupervisorPharmacist")
                        .WithMany("Assistants")
                        .HasForeignKey("SupervisorPharmacistId")
                        .IsRequired()
                        .HasConstraintName("FK_Assistant_Pharmacist");

                    b.Navigation("IdNavigation");

                    b.Navigation("SupervisorPharmacist");
                });

            modelBuilder.Entity("Entities.Models.Document", b =>
                {
                    b.HasOne("Entities.Models.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_DocumentType");

                    b.HasOne("Entities.Models.Patient", "Patient")
                        .WithMany("Documents")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Document_Patient");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document_User");

                    b.Navigation("DocumentType");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.EmailConfiguration", b =>
                {
                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("EmailConfigurations")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_EmailConfiguration_Pharmacy");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Entities.Models.ImportConfiguration", b =>
                {
                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("ImportConfigurations")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_ImportConfiguration_Pharmacy");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Entities.Models.Medication", b =>
                {
                    b.HasOne("Entities.Models.Medication", "LinkedOfficialMedication")
                        .WithMany()
                        .HasForeignKey("LinkedOfficialMedicationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LinkedOfficialMedication");
                });

            modelBuilder.Entity("Entities.Models.MedicationDocument", b =>
                {
                    b.HasOne("Entities.Models.Document", "Document")
                        .WithMany("MedicationDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicationDocument_Document");

                    b.HasOne("Entities.Models.Medication", "Medication")
                        .WithMany("MedicationDocuments")
                        .HasForeignKey("MedicationId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicationDocument_Medication");

                    b.Navigation("Document");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("Entities.Models.Monitoring", b =>
                {
                    b.HasOne("Entities.Models.PharmacyCard", "Card")
                        .WithMany("Monitorings")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK_Monitoring_PharmacyCard");

                    b.HasOne("Entities.Models.Patient", "Patient")
                        .WithMany("Monitorings")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Monitoring_Patient");

                    b.Navigation("Card");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entities.Models.Pharmacist", b =>
                {
                    b.HasOne("Entities.Models.User", "IdNavigation")
                        .WithOne("Pharmacist")
                        .HasForeignKey("Entities.Models.Pharmacist", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacist_User");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Entities.Models.PharmacyCard", b =>
                {
                    b.HasOne("Entities.Models.Patient", "Patient")
                        .WithMany("PharmacyCards")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PharmacyCard_Patient");

                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyCards")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_PharmacyCard_Pharmacy");

                    b.Navigation("Patient");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Entities.Models.Prescription", b =>
                {
                    b.HasOne("Entities.Models.Document", "Document")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Prescription_Document");

                    b.HasOne("Entities.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Prescription_Patient");

                    b.Navigation("Document");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entities.Models.PrescriptionMedication", b =>
                {
                    b.HasOne("Entities.Models.AdministrationMode", "AdministrationMode")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("AdministrationModeId")
                        .HasConstraintName("FK_PrescriptionMedication_AdministrationMode");

                    b.HasOne("Entities.Models.Medication", "Medication")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_PrescriptionMedication_Medication");

                    b.HasOne("Entities.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_PrescriptionMedication_Prescription");

                    b.Navigation("AdministrationMode");

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("Users")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Pharmacy");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Entities.Models.AdministrationMode", b =>
                {
                    b.Navigation("PrescriptionMedications");
                });

            modelBuilder.Entity("Entities.Models.Document", b =>
                {
                    b.Navigation("MedicationDocuments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Entities.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Entities.Models.Medication", b =>
                {
                    b.Navigation("MedicationDocuments");

                    b.Navigation("PrescriptionMedications");
                });

            modelBuilder.Entity("Entities.Models.Patient", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Monitorings");

                    b.Navigation("PharmacyCards");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Entities.Models.Pharmacist", b =>
                {
                    b.Navigation("Assistants");
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.Navigation("EmailConfigurations");

                    b.Navigation("ImportConfigurations");

                    b.Navigation("PharmacyCards");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.PharmacyCard", b =>
                {
                    b.Navigation("Monitorings");
                });

            modelBuilder.Entity("Entities.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedications");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Assistant");

                    b.Navigation("Documents");

                    b.Navigation("Pharmacist");
                });
#pragma warning restore 612, 618
        }
    }
}
